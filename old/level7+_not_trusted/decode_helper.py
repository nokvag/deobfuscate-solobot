#!/usr/bin/env python3
from typing import ByteString

# Ключ для XOR-шифрования
KEY = bytes.fromhex(
    '3c104b151941360c2b11031e13180f3d0b0b041619132e070d15070a0c00031e18071d0f1a0a'
)

def xor_transform(data: ByteString, key: bytes=KEY) -> bytes:
    """
    Универсальная функция XOR‑преобразования.
    Для исходного алгоритма ENCRYPT == DECRYPT.
    """
    if not isinstance(data, (bytes, bytearray)):
        raise TypeError('data must be bytes‑like object')
    return bytes(b ^ key[i % len(key)] for i, b in enumerate(data))

# Декодировка конкретных строк из файла
encoded_strings = [
    b'U\x07\x80\xf7^H\xf2etc\rE`\x87n\xa6\xdb\x0c\xe7\xaf8O:C\xf8\xc3x\x0e8\xf9',
    b'g\x07\x82\xe0@L\xcd.rs\n^{\xa0d\xe6\xde\t\xed\xb5',
    b'\\\x0f\x81\xf4@L\xed8-m\nT|\xc6v\xfd\xd8\x16\xeb\xb5%K>u\xe4\xc8y',
    b'\\\x0f\x81\xf4@L\xc0%fq0^z\x8av\xeb\xc8\x0c\xf8\xb3%T$',
    b'\\\x0f\x81\xf4@L\xc0$ob0^z\x8av\xeb\xc8\x0c\xf8\xb3%T$',
    b'\\\x0f\x81\xf4@L\xed8-h\x00Yf\x8el\xeb\xdb\x11\xe1\xa8"Hd{\xee\xc8o\n<\xe7e^\x97\xfc\x83\xe6\xc7Y\x0c\xf5]\x01\x81\xe3',
    b'D\x0b\x9d\xf9CM\xf6(\\h\x00Yf\x8el\xeb\xdb\x11\xe1\xa8"H',
    b'S\x0b\x81\xf5^H\xf3\x14mi\x1bDi\x81f\xe9\xce\x0c\xe7\xa9?',
    b"\\\x0f\x81\xf4@L\xed8-v\x0eTb\x8dk\xfc\xc9K\xeb\xb55K8s\xe9\xc9~'-\xeaC",
    b'\\\x0f\x81\xf4@L\xed8-v\x0eTb\x8dk\xfc\xc9K\xef\xae*O',
    b'B\x0f\x83\xf9HH\xeb.\\e\x03Dj\x86q\xd7\xd9\n\xec\xa2',
    b"\\\x0f\x81\xf4@L\xed8-v\x0eTb\x8dk\xfc\xc9K\xfa\xa8.T!}\xf8\xd5k'-\xeaC",
    b'\\\x0f\x81\xf4@L\xed8-v\x0eTb\x8dk\xfc\xc9K\xf1\xa8#P+o\xf8\xc7U\x08<\xf2',
    b'\\\x0f\x81\xf4@L\xed8-v\x0eTb\x8dk\xfc\xc9K\xf1\xa8#V%r\xee\xdfU\x08<\xf2',
    b'g!\xa3\xdf\x01h\xdc\x08FU<\x00D\xad\\\xa5\xf8Q\xdc\x89a\x02xM\xd3\x8bFO\x10\xce',
    b'\xe4\xf0>\x11\xfd\xabO\xfb\xd3\xbb\xbf\x93\xdfZ\xd52j\xd5\xa8\x17\xfe\xeb\xff\xcc:w\x8f\xa9\xde[\x80\xe0FXX\xae\x80\x14',
    b'\xe4\xf0>\x11\xfd\xabO\xfb\xd3\xbb\xbf\x93\xdfZ\xd52j\xd5\xa8\x17\xfd\xeb\xf4\xcd\tv\xbaV',
    b'\xe4\xff?.\xfd\xab\xbf\x9b\xbe\xd6\xda\r\xdfX\xd52k\xe7X\x7f\x9c\x89\x9a\xa4Z&\xda\xc6\x8d9\xea\x80(5\xc4\xa0~\xa5\xbc\x01\xe4\xd0?"\xfc\x9cN\xcb\xd2\x8a\xbe\xaf\xdf]%X\x08\xb58\x16\xc4\x1b\x9a\xa6[\x1d\xda\xc0\x8d>\xea\x8d)\n;\x01~\x80\xbd9\xe4\xd7\xcf@\x96\xf9!\x9b\xb7(',
    b'\xe4\xf3? \xfd\xa9N\xc8\xd2\x8e\xbf\x98\xdfU\xd58\x9a\xb4\x0e\x17\xf9\xeb\xf1\xcc5w\x8b\xa9\xdf[\x87\xe0FYkQ,\xeb\xe1\xa1\xe5\xea? \xfc\x90O\xf0\xd3\xb8\xbf\x9f.\xc8\xd5\x16j\xd4Xz\x9c\x85\x9a\xae[\x1e\xdb\xfa\x8d>\xeb\xb1)\x04\xcaQ/\x1a\xbd>\xe4\xd0?+\xfc\x94O\xf5\xd3\xbfO\xfd\xb88\xb5X\x06\xb5=\x17\xf1\xeb\xf4\xcc2\x86\xda\xc7\x8d;\xea\x8f(2:8\x8f',
    b'\xe4\xf9? \xfc\x96N\xc8\xd2\x87\xbf\x97/8\xb7\xa8k\xe5Xr\x9c\x8d\x9a\xa4[\x1a\xda\xcd}Z\xba\xe0HX]Q.\xea\xddQ\x85\xbeQA\xae\xf9%\x9b\xbb(A\x03',
    b'\xe4\xf9? \xfc\x96N\xc8\xd2\x87\xbf\x97/8\xb7\xa8\xca\x17\xe7\xa39X>u\xe4\xc8*\xa9\xdd[\x8f\xe0NXRP\x12\xea\xd8\xaf\x1a@',
    b'd\x01\x83\xfcEG\xf8k\xd3\xb8\xbe\xac\xdej\xd58j\xd8Xy\x9c\x89\x9a\xa7[\x13\xda\xc5}[\x88\x10)\x08:5~\x8c\xbd9\xe4\xd2?%\x0c\xf8\x1f\x9b\xb3\xd6\xd8\xfc\x8f8\xb5X\x0b\xb56\x16\xce\xeb\xf0\xcc3\x88*\xa8\xc3Z\xb8\xe0DX_P\x13\xea\xdd\xa1\xe5\xea?.\xfc\x94O\xf5\xd3\xb4\xbe\xa6\xdem%X\r\xb58\x17\xf8\xeb\xfa\xcd\x0c\x88$V'
]

print("Расшифрованные строки:")
for i, enc_str in enumerate(encoded_strings):
    try:
        decoded = xor_transform(enc_str).decode('utf-8')
        print(f"{i+1}: {decoded}")
    except:
        print(f"{i+1}: [Не удалось декодировать]") 